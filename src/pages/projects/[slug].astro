---
import Layout from "@layouts/Layout.astro";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const projects = await getCollection("projects", ({ data }) =>
    import.meta.env.DEV ? true : data.status !== "archived"
  );
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: { project },
  }));
}

const { project } = Astro.props as { project: CollectionEntry<"projects"> };
const { Content } = await project.render();

const publishDate = new Date(project.data.publishDate).toLocaleDateString("en-US", {
  year: "numeric",
  month: "long",
});

const updatedDate = project.data.updatedDate
  ? new Date(project.data.updatedDate).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
    })
  : undefined;

const publishDateIso = new Date(project.data.publishDate).toISOString();
const updatedDateIso = project.data.updatedDate
  ? new Date(project.data.updatedDate).toISOString()
  : undefined;

const siteOrigin = Astro.site?.origin ?? Astro.url.origin ?? "https://jarvishub.com";
const canonicalUrl = new URL(Astro.url.pathname, siteOrigin).toString();
const coverImageUrl = project.data.coverImage
  ? new URL(project.data.coverImage, siteOrigin).toString()
  : undefined;

const projectStructuredData: Record<string, unknown> = {
  "@context": "https://schema.org",
  "@type": "CreativeWork",
  name: project.data.title,
  description: project.data.summary,
  url: canonicalUrl,
  mainEntityOfPage: canonicalUrl,
  datePublished: publishDateIso,
  dateModified: updatedDateIso ?? publishDateIso,
  inLanguage: "en-US",
  creator: {
    "@type": "Person",
    name: "Jarvis Hub",
  },
};

if (project.data.roles.length > 0) {
  projectStructuredData.about = project.data.roles.join(", ");
}

if (project.data.stack.length > 0) {
  projectStructuredData.keywords = project.data.stack.join(", ");
}

if (coverImageUrl) {
  projectStructuredData.image = [coverImageUrl];
}

if (project.data.externalUrl) {
  projectStructuredData.sameAs = [project.data.externalUrl];
}
---

<Layout
  title={`${project.data.title} - Jarvis Hub`}
  description={project.data.summary}
  seo={{
    canonical: canonicalUrl,
    type: "article",
    image: project.data.coverImage
      ? {
          src: project.data.coverImage,
          alt: project.data.title,
        }
      : undefined,
    publishedTime: publishDateIso,
    modifiedTime: updatedDateIso,
    tags: project.data.stack,
    structuredData: projectStructuredData,
  }}
>
  <article class="project">
    <header class="project__hero">
      <a class="project__breadcrumb" href="/projects">← Back to all projects</a>
      <div class="project__meta">
        <span class={`status status--${project.data.status}`}>{project.data.status}</span>
        <span>{publishDate}</span>
        {updatedDate && (
          <>
            <span>•</span>
            <span>Updated {updatedDate}</span>
          </>
        )}
      </div>
      <h1>{project.data.title}</h1>
      <p class="project__summary">{project.data.summary}</p>
      <div class="project__details">
        {project.data.roles.length > 0 && (
          <div>
            <h2>Roles</h2>
            <p>{project.data.roles.join(", ")}</p>
          </div>
        )}
        {project.data.stack.length > 0 && (
          <div>
            <h2>Stack</h2>
            <p>{project.data.stack.join(" · ")}</p>
          </div>
        )}
        {project.data.externalUrl && (
          <div>
            <h2>Live</h2>
            <a class="project__link" href={project.data.externalUrl} target="_blank" rel="noreferrer">
              Visit project ↗
            </a>
          </div>
        )}
      </div>
      {project.data.coverImage && (
        <img
          class="project__cover"
          src={project.data.coverImage}
          alt={project.data.title}
          loading="lazy"
        />
      )}
    </header>

    <section class="project__content">
      <Content />
    </section>
  </article>
</Layout>

<style>
  .project {
    display: flex;
    flex-direction: column;
    gap: 40px;
  }

  .project__hero {
    display: flex;
    flex-direction: column;
    gap: 18px;
  }

  .project__breadcrumb {
    color: rgba(148, 163, 184, 0.85);
    text-decoration: none;
    font-size: 0.95rem;
  }

  .project__breadcrumb:hover {
    color: #f8fafc;
  }

  .project__meta {
    display: flex;
    gap: 10px;
    align-items: center;
    color: rgba(148, 163, 184, 0.85);
    font-size: 0.9rem;
  }

  .project__hero h1 {
    margin: 0;
    font-size: clamp(2.4rem, 4vw, 3.2rem);
  }

  .project__summary {
    margin: 0;
    font-size: 1.1rem;
    line-height: 1.7;
    color: rgba(203, 213, 225, 0.9);
    max-width: 720px;
  }

  .project__details {
    display: grid;
    gap: 20px;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  }

  .project__details h2 {
    margin: 0 0 6px;
    font-size: 0.95rem;
    text-transform: uppercase;
    letter-spacing: 0.12em;
    color: rgba(148, 163, 184, 0.7);
  }

  .project__details p,
  .project__link {
    margin: 0;
    color: rgba(203, 213, 225, 0.9);
    text-decoration: none;
  }

  .project__link:hover {
    color: #f8fafc;
  }

  .project__cover {
    width: 100%;
    border-radius: 24px;
    border: 1px solid rgba(148, 163, 184, 0.18);
    background: rgba(11, 16, 32, 0.6);
  }

  .project__content {
    display: flex;
    flex-direction: column;
    gap: 18px;
    line-height: 1.7;
    color: rgba(226, 232, 240, 0.95);
  }

  .project__content h2,
  .project__content h3 {
    margin-top: 2em;
    margin-bottom: 0.6em;
  }

  .project__content p {
    margin: 0 0 1em;
  }

  .project__content ul,
  .project__content ol {
    padding-left: 1.4em;
    margin: 0 0 1em;
  }

  .status {
    text-transform: capitalize;
    padding: 4px 10px;
    border-radius: 999px;
    border: 1px solid rgba(148, 163, 184, 0.18);
  }

  .status--launched {
    background: rgba(34, 197, 94, 0.1);
    border-color: rgba(34, 197, 94, 0.35);
    color: rgba(134, 239, 172, 0.95);
  }

  .status--in-progress {
    background: rgba(250, 204, 21, 0.1);
    border-color: rgba(250, 204, 21, 0.35);
    color: rgba(253, 224, 71, 0.95);
  }

  .status--archived {
    background: rgba(148, 163, 184, 0.1);
    border-color: rgba(148, 163, 184, 0.35);
    color: rgba(148, 163, 184, 0.95);
  }

  @media (max-width: 720px) {
    .project__details {
      grid-template-columns: 1fr;
    }
  }
</style>
